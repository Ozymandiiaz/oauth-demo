{"version":3,"sources":["components/Homepage.jsx","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","state","user","error","authenticated","handleLoginClick","window","open","handleLogoutClick","_this","setState","_this2","this","fetch","then","response","json","obj","isAuthenticated","_this3","method","credentials","headers","Accept","Content-Type","Access-Control-Allow-Credentials","status","Error","responseJson","catch","react_default","a","createElement","src","profileImageUrl","alt","id","username","provider","className","onClick","Component","AppRouter","react_router_dom","react_router","exact","path","component","App","AppRouter_AppRouter","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAGqBA,6MAmBnBC,MAAQ,CACNC,KAAM,GACNC,MAAO,KACPC,eAAe,KAwDjBC,iBAAmB,WAIjBC,OAAOC,KAAK,eAAgB,YAG9BC,kBAAoB,WAGlBF,OAAOC,KAAK,eAAgB,SAC5BE,EAAKC,SAAS,CAACN,eAAe,EAAOF,KAAM,yFA9DzB,IAAAS,EAAAC,KAClBC,MAAM,cAGHC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GACJN,EAAKD,SAAS,CACXN,cAAea,EAAIC,gBACnBhB,KAAMe,EAAIf,8DAOS,IAAAiB,EAAAP,KAQ3BC,MAAM,4CAA6C,CACjDO,OAAQ,MACRC,YAAa,UACbC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,mBAChBC,oCAAoC,KAGrCX,KAAK,SAAAC,GACJ,GAAwB,MAApBA,EAASW,OAAgB,OAAOX,EAASC,OAC7C,MAAM,IAAIW,MAAM,iCAEjBb,KAAK,SAAAc,GAEJT,EAAKT,SAAS,CACZN,eAAe,EACfF,KAAM0B,EAAa1B,SAGtB2B,MAAM,SAAA1B,GACLgB,EAAKT,SAAS,CACZN,eAAe,EACfD,MAAO,mEAoBb,OACE2B,EAAAC,EAAAC,cAAA,WACMpB,KAAKX,MAAMG,cAST0B,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,OAAKC,IAAKrB,KAAKX,MAAMC,KAAKgC,gBAAiBC,IAAI,gBAAeL,EAAAC,EAAAC,cAAA,WAC9DF,EAAAC,EAAAC,cAAA,gBAAQpB,KAAKX,MAAMC,KAAKkC,GAAGN,EAAAC,EAAAC,cAAA,WAA3B,aACcpB,KAAKX,MAAMC,KAAKmC,SAASP,EAAAC,EAAAC,cAAA,WADvC,aAEcpB,KAAKX,MAAMC,KAAKoC,SAASR,EAAAC,EAAAC,cAAA,YAEvCF,EAAAC,EAAAC,cAAA,UAAQO,UAAU,4BACjBC,QAAS5B,KAAKJ,mBACfsB,EAAAC,EAAAC,cAAA,QAAMO,UAAU,iBAFhB,0BAfFT,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,2CAAkCF,EAAAC,EAAAC,cAAA,WAAlC,iBACAF,EAAAC,EAAAC,cAAA,UAAQO,UAAU,4BACfC,QAAS5B,KAAKP,kBACfyB,EAAAC,EAAAC,cAAA,QAAMO,UAAU,iBAFlB,iCAlG0BE,6BCCzBC,EAAY,WACvB,OACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/C,OCC1BgD,mLAJX,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,aAFOR,aCSES,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.9fef0148.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class HomePage extends Component {\r\n  //propTypes is just a React built-in tool for validating the types of props.\r\n  //An error is thrown if a prop comes in of an incorrect type.\r\n  //More sophisticated validation can also be accomplished, e.g., ranges. See\r\n  //https://blog.logrocket.com/validating-react-component-props-with-prop-types-ef14b29963fc/\r\n  \r\n  static propTypes = {\r\n    user: PropTypes.shape({\r\n      id: PropTypes.string,\r\n      usermame: PropTypes.string,\r\n      provider: PropTypes.string,\r\n      profileImageUrl: PropTypes.string\r\n    })\r\n  };\r\n\r\n  //Here is an example of defining a component's state without the need for a\r\n  //constructor. This is a relatively new \"alternative class syntax\" that uses a\r\n  //so-called \"class field declaration.\" For details, see \r\n  //https://www.robinwieruch.de/react-state-without-constructor.\r\n  state = {\r\n    user: {},\r\n    error: null,\r\n    authenticated: false\r\n  };\r\n\r\n\r\n  //New componentDidMount: We set component state based on results of fetch to auth/test route.\r\n  componentDidMount() {\r\n    fetch(\"/auth/test\")\r\n      // .then(res => res.text())\r\n      // .then(text => console.log(text));\r\n      .then((response) => response.json())\r\n      .then((obj) => \r\n        {this.setState({\r\n            authenticated: obj.isAuthenticated,\r\n            user: obj.user\r\n          });\r\n        });\r\n  }\r\n\r\n  //Renamed original componentDidMount to effectively comment it out.\r\n  //Saving it for posterity.\r\n  componentDidMount_Original() {\r\n    // Fetch does not send cookies, so we instead add credentials: 'include'\r\n    // This fetch function is intended to ask the server whether the current\r\n    // user has been authenticated. What's odd about this approach is that it is\r\n    // calling a server in a domain (localhost:4000) that is different from the\r\n    // domain of the React single-page app. I don't like this; it seems\r\n    // contrived. Why wouldn't we want to keep the client and server code in the\r\n    // same domain to avoid the need for CORS?\r\n    fetch(\"http://localhost:30000/auth/login/success\", {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Credentials\": true\r\n      }\r\n    })\r\n      .then(response => {\r\n        if (response.status === 200) return response.json();\r\n        throw new Error(\"failed to authenticate user\");\r\n      })\r\n      .then(responseJson => { \r\n        //Here is where we push the results of the GET request into the component's state\r\n        this.setState({\r\n          authenticated: true,\r\n          user: responseJson.user\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          authenticated: false,\r\n          error: \"Failed to authenticate user\"\r\n        });\r\n      });\r\n  }\r\n\r\n  handleLoginClick = () => {\r\n    // Authenticate using via passport api\r\n    // Open Oauth login page\r\n    // Upon successful login, a cookie session will be stored in the client\r\n    window.open(\"/auth/github\", \"_self\");\r\n  };\r\n\r\n  handleLogoutClick = () => {\r\n    // Logout using Oauth passport api\r\n    // Set authenticated state to false in the HomePage\r\n    window.open(\"/auth/logout\", \"_self\");\r\n    this.setState({authenticated: false, user: {}});\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          {!this.state.authenticated ? (\r\n            <center>\r\n            <h1>Welcome to the OAuth Demo App!<br/>Please Log in</h1>\r\n            <button className=\"btn btn-block btn-primary\"\r\n               onClick={this.handleLoginClick}>\r\n              <span className=\"fa fa-github\"></span> Sign in with GitHub\r\n            </button>\r\n            </center>\r\n          ) : (\r\n              <center>\r\n              <h1>You have logged in succcessfully!</h1>\r\n              <img src={this.state.user.profileImageUrl} alt=\"profile pic\"/><br/>\r\n              <p>Id: {this.state.user.id}<br/>\r\n                 Username: {this.state.user.username}<br/>\r\n                 Provider: {this.state.user.provider}<br/>\r\n              </p>\r\n              <button className=\"btn btn-block btn-primary\"\r\n               onClick={this.handleLogoutClick}>\r\n              <span className=\"fa fa-github\"></span> Sign out from GitHub\r\n            </button>\r\n              \r\n              </center>     \r\n          )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport HomePage from \"./components/Homepage\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nexport const AppRouter = () => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { AppRouter } from \"./AppRouter\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <AppRouter />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}